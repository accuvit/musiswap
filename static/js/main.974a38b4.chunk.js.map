{"version":3,"sources":["services/spotify.ts","components/YesIMadeAProgressBarSoWhat/index.tsx","settings.js","components/Spotify/index.tsx","services/youtube.ts","components/Youtube/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["token","url","a","axios","request","method","headers","Authorization","YesIMadeAProgressBarSoWhat","color","rate","className","containerStyle","backgroundColor","borderRadius","width","size","height","progressStyle","display","alignItems","justifyContent","overflowX","style","fontWeight","fontSize","marginRight","textShadow","toFixed","googleApiKey","Spotify","props","useState","setToken","name","setName","imageUrl","setImageUrl","photoLoaded","setPhotoLoaded","loadingMusic","setLoadingMusic","loadingMusicRate","setLoadingMusicRate","trackList","setTrackList","localUrl","window","location","origin","setTracks","useEffect","requestHandler","likedTracksRequest","access_token","then","res","tempList","data","items","map","item","track","artist","artists","prevState","offset","length","total","next","src","alt","onLoad","onClick","clientId","redirectUri","onSuccess","e","getUserInfos","display_name","images","onFailure","console","log","scope","searchRequest","query","convertedQuery","encodeURIComponent","Accept","addTrack","playlistId","searchResponse","videoId","id","addVideoToPlaylist","addPlaylistResponse","videoCode","playListCode","snippet","resourceId","kind","addPlaylist","title","description","tags","privacyStatus","Youtube","user","setUser","importTracks","convertList","tracks","playlistCode","totalTracks","i","index","parseInt","setLoadingStats","label","response","catch","error","givenName","profileObj","accessToken","code","err","isSignedIn","cookiePolicy","render","renderProps","App","loadingStats","href","target","rel","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.974a38b4.chunk.js","sourcesContent":["import axios from 'axios';\n\nfunction getUserInfos(token: string) {\n  return axios.request({\n    method: 'get',\n    url: 'https://api.spotify.com/v1/me',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n}\n\ninterface MusicInfo {\n  name: string;\n  artist: string;\n}\n\nfunction getLikedMusic() {}\n\nasync function likedTracksRequest(token: string, url: string) {\n  return axios.request({\n    method: 'get',\n    url: url,\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n}\n\nexport { getUserInfos, getLikedMusic, likedTracksRequest };\n","import React from 'react';\n\ntype ProgressProps = {\n  color?: string;\n  rate: number;\n  className?: string;\n  size?: string;\n};\n\nconst YesIMadeAProgressBarSoWhat = ({\n  color,\n  rate,\n  className,\n  size,\n}: ProgressProps) => {\n  const containerStyle = {\n    backgroundColor: 'transparent',\n    borderRadius: 50,\n    width: size || '100%',\n    height: '40px',\n  };\n\n  const progressStyle = {\n    backgroundColor: color || 'transparent',\n    width: `${rate * 100}%`,\n    height: '100%',\n    borderRadius: 50,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    overflowX: 'hidden' as 'hidden',\n  };\n\n  const textStyle = {\n    fontWeight: 'bold' as 'bold', //sometimes fuck typescript\n    color: 'rgba(0,0,0,0.15)',\n    fontSize: '1.5em',\n    marginRight: '5px',\n    textShadow:\n      '2px 2px 1px rgba(255,255,255,0.3), -1px -1px 1px rgba(0,0,0,0.1)',\n  };\n\n  return (\n    <div style={containerStyle} className={className}>\n      <div style={progressStyle} className={'neumorph'}>\n        <span style={textStyle}>{`${(rate * 100).toFixed(0)}%`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default YesIMadeAProgressBarSoWhat;\n","export const spotifyClientId = '854299fae15c42078e103c1b1f5b6eb7';\nexport const sporifyRedirectUri = 'https://accuvit.github.io/musiswap';\nexport const googleClientId = '230448497881-97p4dipujfsu8i5ehqbbte2rmsl9e1p2.apps.googleusercontent.com'\nexport const googleApiKey = 'AIzaSyDz4zsQw78G1PvS-LO4bSgbfrp5KlIX9ik'","import React, { useState, useEffect } from 'react';\nimport './spotify.css';\nimport { getUserInfos, likedTracksRequest } from '../../services/spotify';\nimport YesIMadeAProgressBarSoWhat from '../YesIMadeAProgressBarSoWhat';\nimport { TrackData } from '../../App';\n\n//@ts-ignore\nimport SpotifyLogin from 'react-spotify-login';\nimport { spotifyClientId } from '../../settings.js';\n\nimport { FaSpotify } from 'react-icons/fa';\n\ninterface Token {\n  access_token: string;\n  token_type: string;\n  expires_in: string;\n}\n\ntype SpotifyProps = {\n  setTracks: Function;\n};\n\nfunction Spotify(props: SpotifyProps) {\n  const [token, setToken] = useState<Token>();\n  const [name, setName] = useState<string>();\n  const [imageUrl, setImageUrl] = useState<string>();\n  const [photoLoaded, setPhotoLoaded] = useState<Boolean>(false);\n  const [loadingMusic, setLoadingMusic] = useState<Boolean>(false);\n  const [loadingMusicRate, setLoadingMusicRate] = useState<number>(0);\n  const [trackList, setTrackList] = useState<Array<TrackData>>([]);\n\n  const endpointUrl = 'https://api.spotify.com/v1/me/tracks?offset=0&limit=50';\n  const localUrl = window.location.origin;\n  const setTracks: Function = props.setTracks;\n\n  useEffect(() => {\n    return setTracks(trackList);\n  }, [loadingMusic]);\n\n  const getMusic = () => {\n    setLoadingMusic(true);\n    requestHandler(endpointUrl);\n  };\n\n  const requestHandler = (url: string) => {\n    likedTracksRequest(token?.access_token || '', url).then((res) => {\n      let tempList: Array<TrackData> = [];\n      const data: SpotifyApi.UsersSavedTracksResponse = res.data;\n      tempList = data.items.map((item) => {\n        return {\n          name: item.track.name,\n          artist: item.track.artists[0].name,\n        };\n      });\n\n      setTrackList((prevState) => {\n        const newList: Array<TrackData> = [...prevState, ...tempList];\n        return newList;\n      });\n      setLoadingMusicRate((data.offset + data.items.length) / data.total);\n\n      data.next ? requestHandler(data.next) : setLoadingMusic(false);\n    });\n  };\n\n  return (\n    <div className='spotifyRoot neumorph-in'>\n      <FaSpotify\n        className={`icon ${photoLoaded ? 'icon-out' : ''}`}\n        size={100}\n      />\n      <img\n        src={imageUrl}\n        height='100px'\n        className={`${photoLoaded ? 'avatar' : ''} avatar-in`}\n        alt={name}\n        onLoad={() => setPhotoLoaded(true)}\n      />\n      <p>{!name ? null : `Welcome ${name}!`}</p>\n      {!token ? (\n        <SpotifyLogin\n          className='sbutton neumorph'\n          clientId={spotifyClientId}\n          redirectUri={localUrl}\n          onSuccess={(e: Token) => {\n            setToken(e);\n            getUserInfos(e.access_token).then((res) => {\n              setName(res.data.display_name);\n              setImageUrl(res.data.images[0].url);\n            });\n          }}\n          onFailure={(e: any) => console.log(e)}\n          scope='user-library-read'\n        >\n          Login Spotify\n        </SpotifyLogin>\n      ) : loadingMusic ? (\n        <YesIMadeAProgressBarSoWhat\n          color='transparent'\n          rate={loadingMusicRate}\n          size='200px'\n        ></YesIMadeAProgressBarSoWhat>\n      ) : trackList.length === 0 ? (\n        <button className='sbutton neumorph' onClick={getMusic}>\n          Load my liked tracks{' '}\n        </button>\n      ) : (\n        <span>{`${trackList.length} tracks selected`}</span>\n      )}\n      {/* <YesIMadeAProgressBarSoWhat\n        color='#1db954'\n        rate={0.5}\n      ></YesIMadeAProgressBarSoWhat> */}\n    </div>\n  );\n}\n\nexport default Spotify;\n","import axios, { AxiosResponse } from 'axios';\nimport { googleApiKey } from '../settings';\nimport { TrackData } from '../App';\n\n// TODO: REMOVE ALL AXIOS CRAP AND CHANGE DO GOOGLEAPIS NODE LIBRARY\n\nfunction searchRequest(\n  token: string,\n  query: string,\n): Promise<AxiosResponse<any>> {\n  const convertedQuery: string = encodeURIComponent(query);\n  const url: string = `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&order=relevance&q=${convertedQuery}&safeSearch=none&type=video&key=${googleApiKey}`;\n\n  return axios.request({\n    method: 'GET',\n    url: url,\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Accept: 'application/json',\n    },\n  });\n}\n\nasync function addTrack(token: string, track: TrackData, playlistId: string) {\n  const query = `${track.artist} ${track.name}`;\n  /* searchRequest(token, query).then((res: AxiosResponse) => {\n    const videoId: string = res.data.items[0].id.videoId;\n    console.log(`video searched - ${videoId}`);\n    addVideoToPlaylist(token, videoId, playlistId).then((res) => {\n      console.log(`video added - ${videoId}`)\n    });\n  }); */\n  const searchResponse = await searchRequest(token, query);\n  const videoId = searchResponse.data.items[0].id.videoId;\n  const addPlaylistResponse = await addVideoToPlaylist(\n    token,\n    videoId,\n    playlistId,\n  );\n  return addPlaylistResponse.data;\n}\n\nfunction addVideoToPlaylist(\n  token: string,\n  videoCode: string,\n  playListCode: string,\n) {\n  const url = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&key=${googleApiKey}`;\n  return axios.request({\n    method: 'POST',\n    url: url,\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Accept: 'application/json',\n    },\n    data: {\n      snippet: {\n        playlistId: playListCode,\n        resourceId: {\n          kind: 'youtube#video',\n          videoId: videoCode,\n        },\n      },\n    },\n  });\n}\n\nfunction addPlaylist(token: string, name: string) {\n  const url: string = `https://www.googleapis.com/youtube/v3/playlists?part=snippet%2Cstatus&key=${googleApiKey}`;\n\n  return axios.request({\n    method: 'POST',\n    url: url,\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Accept: 'application/json',\n    },\n    data: {\n      snippet: {\n        title: name,\n        description: 'Converted playlist from Spotify',\n        tags: ['API Call', 'Musiswap', 'Music'],\n      },\n      privacyStatus: 'public',\n    },\n  });\n}\n\nexport { searchRequest, addPlaylist, addTrack };\n","import React, { useState } from 'react';\nimport './youtube.css';\nimport { googleClientId } from '../../settings';\nimport { TrackData, LoadingStats } from '../../App';\nimport { addTrack, addPlaylist } from '../../services/youtube';\n\nimport {\n  GoogleLogin,\n  GoogleLoginResponse,\n  GoogleLoginResponseOffline,\n} from 'react-google-login';\n\nimport { FaYoutube } from 'react-icons/fa';\nimport { AxiosResponse } from 'axios';\n\ninterface User {\n  googleId: string;\n  imageUrl: string;\n  email: string;\n  name: string;\n  givenName: string;\n  familyName: string;\n}\n\ntype youtubeProps = {\n  tracks: Array<TrackData>;\n  setLoadingStats: React.Dispatch<\n    React.SetStateAction<LoadingStats | undefined>\n  >;\n};\n\ntype YoutubeAddPlaylistResponse = {\n  kind: string;\n  etag: string;\n  id: string;\n  snippet: {\n    publishedAt: string;\n    channelId: string;\n    title: string;\n    description: string;\n    thumbnails: {\n      default: {\n        url: string;\n        width: number;\n        height: number;\n      };\n      medium: {\n        url: string;\n        width: number;\n        height: number;\n      };\n      high: {\n        url: string;\n        width: number;\n        height: number;\n      };\n    };\n    channelTitle: string;\n    tags: Array<string>;\n    defaultLanguage: string;\n    localized: {\n      title: string;\n      description: string;\n    };\n  };\n  status: {\n    privacyStatus: string;\n  };\n};\n\nfunction Youtube(props: youtubeProps) {\n  const [token, setToken] = useState<string>('');\n  const [user, setUser] = useState<User>();\n  const [imageUrl, setImageUrl] = useState<string>();\n  const [photoLoaded, setPhotoLoaded] = useState<boolean>(false);\n\n  /*\n  I had to add single tracks instead of a batch because Youtube API\n  is inconsistent when using multiple requests at once. This slow\n  down the process a lot, but Google doesn't really care about\n  other developers\n  */\n  const importTracks = async () => {\n    const playlistName: string = 'Musiswap';\n    const convertList = props.tracks;\n    await addPlaylist(token, playlistName)\n      .then(async (res: AxiosResponse<YoutubeAddPlaylistResponse>) => {\n        const playlistCode = res.data.id;\n        const totalTracks = convertList.length;\n        for (const i in convertList) {\n          const index = parseInt(i);\n          props.setLoadingStats(() => {\n            return {\n              rate: index / totalTracks,\n              label: `Loading ${convertList[index].artist} - ${convertList[index].name}`,\n            };\n          });\n          const response = await addTrack(token, convertList[i], playlistCode);\n          console.log(response);\n        }\n        props.setLoadingStats(() => {\n          return {\n            rate: 1,\n            label: 'Complete! Check your \"Musiswap\" playlist on YouTube!',\n          };\n        });\n      })\n      .catch((error) => {\n        props.setLoadingStats((prevState) => {\n          return {\n            rate: prevState?.rate || 0,\n            label: 'For some reason the loading failed, try again later',\n          };\n        });\n      });\n  };\n\n  /*\n  Callback from Google login, got in a lot of trouble trying to\n  implement this with typescript\n  */\n  const successCallback = (\n    res: GoogleLoginResponse | GoogleLoginResponseOffline,\n  ): any => {\n    setUser((res as GoogleLoginResponse).profileObj);\n    setToken(\n      (res as GoogleLoginResponse).accessToken ||\n        (res as GoogleLoginResponseOffline).code,\n    );\n    setImageUrl((res as GoogleLoginResponse).profileObj.imageUrl);\n  };\n\n  return (\n    <div className='youtube-root neumorph-in'>\n      <FaYoutube\n        className={`icon-youtube ${photoLoaded ? 'icon-out' : ''}`}\n        size={100}\n      />\n      <img\n        src={imageUrl}\n        height='100px'\n        className={`${photoLoaded ? 'avatar' : ''} avatar-in`}\n        alt={user?.name}\n        onLoad={() => setPhotoLoaded(true)}\n      />\n      <p>{user ? `You're set, ${user.givenName}` : null}</p>\n      {token ? (\n        props.tracks.length > 0 ? (\n          <button className={'loginButton neumorph'} onClick={importTracks}>\n            Import selected tracks\n          </button>\n        ) : (\n          <div />\n        )\n      ) : (\n        <GoogleLogin\n          clientId={googleClientId}\n          onSuccess={successCallback}\n          onFailure={(err) => {\n            console.log(err);\n          }}\n          isSignedIn={false}\n          cookiePolicy={'single_host_origin'}\n          render={(renderProps) => (\n            <button\n              className={'loginButton neumorph'}\n              onClick={renderProps.onClick}\n            >\n              Login Google\n            </button>\n          )}\n          scope={'https://www.googleapis.com/auth/youtube'}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Youtube;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Spotify from './components/Spotify';\nimport Youtube from './components/Youtube';\nimport { FiInfo } from 'react-icons/fi';\nimport YesIMadeAProgressBarSoWhat from './components/YesIMadeAProgressBarSoWhat';\n\nexport type TrackData = {\n  name: string;\n  artist: string;\n};\n\nexport type LoadingStats = {\n  label: string;\n  rate: number;\n};\n\nfunction App() {\n  const [tracks, setTracks] = useState<Array<TrackData>>([]);\n  const [loadingStats, setLoadingStats] = useState<LoadingStats>();\n  return (\n    <div className='App'>\n      <div className='infoDiv'>\n        <a\n          href='https://github.com/accuvit/musiswap/blob/develop/USERGUIDE.md'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          <FiInfo className='icon' size={'3em'} color='rgba(255,255,255,0.4)' />\n        </a>\n      </div>\n      {loadingStats && (\n        <div className='loadingBar'>\n          <span className='loadingTxt'>{loadingStats.label}</span>\n          <YesIMadeAProgressBarSoWhat rate={loadingStats.rate} size={'60vw'} />\n        </div>\n      )}\n      <div className='main'>\n        <div className='spotify halfPart'>\n          <Spotify setTracks={setTracks} />\n        </div>\n        <div className='youtube halfPart'>\n          <Youtube tracks={tracks} setLoadingStats={setLoadingStats} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}